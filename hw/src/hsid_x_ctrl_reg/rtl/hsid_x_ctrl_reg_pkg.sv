// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package hsid_x_ctrl_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } start;
    struct packed {
      logic        q;
    } idle;
    struct packed {
      logic        q;
    } ready;
    struct packed {
      logic        q;
    } done;
    struct packed {
      logic        q;
    } clear;
    struct packed {
      logic        q;
    } error;
  } hsid_x_ctrl_reg2hw_status_reg_t;

  typedef struct packed {
    logic [11:0] q;
  } hsid_x_ctrl_reg2hw_library_size_reg_t;

  typedef struct packed {
    logic [7:0]  q;
  } hsid_x_ctrl_reg2hw_pixel_bands_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } hsid_x_ctrl_reg2hw_captured_pixel_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } hsid_x_ctrl_reg2hw_library_pixel_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } hsid_x_ctrl_reg2hw_mse_min_ref_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } hsid_x_ctrl_reg2hw_mse_max_ref_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } hsid_x_ctrl_reg2hw_mse_min_value_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } hsid_x_ctrl_reg2hw_mse_max_value_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } start;
    struct packed {
      logic        d;
      logic        de;
    } idle;
    struct packed {
      logic        d;
      logic        de;
    } ready;
    struct packed {
      logic        d;
      logic        de;
    } done;
    struct packed {
      logic        d;
      logic        de;
    } clear;
    struct packed {
      logic        d;
      logic        de;
    } error;
  } hsid_x_ctrl_hw2reg_status_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } hsid_x_ctrl_hw2reg_mse_min_ref_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } hsid_x_ctrl_hw2reg_mse_max_ref_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } hsid_x_ctrl_hw2reg_mse_min_value_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } hsid_x_ctrl_hw2reg_mse_max_value_reg_t;

  // Register -> HW type
  typedef struct packed {
    hsid_x_ctrl_reg2hw_status_reg_t status; // [217:212]
    hsid_x_ctrl_reg2hw_library_size_reg_t library_size; // [211:200]
    hsid_x_ctrl_reg2hw_pixel_bands_reg_t pixel_bands; // [199:192]
    hsid_x_ctrl_reg2hw_captured_pixel_addr_reg_t captured_pixel_addr; // [191:160]
    hsid_x_ctrl_reg2hw_library_pixel_addr_reg_t library_pixel_addr; // [159:128]
    hsid_x_ctrl_reg2hw_mse_min_ref_reg_t mse_min_ref; // [127:96]
    hsid_x_ctrl_reg2hw_mse_max_ref_reg_t mse_max_ref; // [95:64]
    hsid_x_ctrl_reg2hw_mse_min_value_reg_t mse_min_value; // [63:32]
    hsid_x_ctrl_reg2hw_mse_max_value_reg_t mse_max_value; // [31:0]
  } hsid_x_ctrl_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    hsid_x_ctrl_hw2reg_status_reg_t status; // [143:132]
    hsid_x_ctrl_hw2reg_mse_min_ref_reg_t mse_min_ref; // [131:99]
    hsid_x_ctrl_hw2reg_mse_max_ref_reg_t mse_max_ref; // [98:66]
    hsid_x_ctrl_hw2reg_mse_min_value_reg_t mse_min_value; // [65:33]
    hsid_x_ctrl_hw2reg_mse_max_value_reg_t mse_max_value; // [32:0]
  } hsid_x_ctrl_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] HSID_X_CTRL_STATUS_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] HSID_X_CTRL_LIBRARY_SIZE_OFFSET = 6'h 4;
  parameter logic [BlockAw-1:0] HSID_X_CTRL_PIXEL_BANDS_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] HSID_X_CTRL_CAPTURED_PIXEL_ADDR_OFFSET = 6'h c;
  parameter logic [BlockAw-1:0] HSID_X_CTRL_LIBRARY_PIXEL_ADDR_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] HSID_X_CTRL_MSE_MIN_REF_OFFSET = 6'h 14;
  parameter logic [BlockAw-1:0] HSID_X_CTRL_MSE_MAX_REF_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] HSID_X_CTRL_MSE_MIN_VALUE_OFFSET = 6'h 1c;
  parameter logic [BlockAw-1:0] HSID_X_CTRL_MSE_MAX_VALUE_OFFSET = 6'h 20;

  // Register index
  typedef enum int {
    HSID_X_CTRL_STATUS,
    HSID_X_CTRL_LIBRARY_SIZE,
    HSID_X_CTRL_PIXEL_BANDS,
    HSID_X_CTRL_CAPTURED_PIXEL_ADDR,
    HSID_X_CTRL_LIBRARY_PIXEL_ADDR,
    HSID_X_CTRL_MSE_MIN_REF,
    HSID_X_CTRL_MSE_MAX_REF,
    HSID_X_CTRL_MSE_MIN_VALUE,
    HSID_X_CTRL_MSE_MAX_VALUE
  } hsid_x_ctrl_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] HSID_X_CTRL_PERMIT [9] = '{
    4'b 0001, // index[0] HSID_X_CTRL_STATUS
    4'b 0011, // index[1] HSID_X_CTRL_LIBRARY_SIZE
    4'b 0001, // index[2] HSID_X_CTRL_PIXEL_BANDS
    4'b 1111, // index[3] HSID_X_CTRL_CAPTURED_PIXEL_ADDR
    4'b 1111, // index[4] HSID_X_CTRL_LIBRARY_PIXEL_ADDR
    4'b 1111, // index[5] HSID_X_CTRL_MSE_MIN_REF
    4'b 1111, // index[6] HSID_X_CTRL_MSE_MAX_REF
    4'b 1111, // index[7] HSID_X_CTRL_MSE_MIN_VALUE
    4'b 1111  // index[8] HSID_X_CTRL_MSE_MAX_VALUE
  };

endpackage

