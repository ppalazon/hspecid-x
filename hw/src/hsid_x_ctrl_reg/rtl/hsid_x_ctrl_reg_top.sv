// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module hsid_x_ctrl_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 6
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output hsid_x_ctrl_reg_pkg::hsid_x_ctrl_reg2hw_t reg2hw, // Write
  input  hsid_x_ctrl_reg_pkg::hsid_x_ctrl_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import hsid_x_ctrl_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic status_start_qs;
  logic status_start_wd;
  logic status_start_we;
  logic status_idle_qs;
  logic status_ready_qs;
  logic status_done_qs;
  logic status_clear_qs;
  logic status_clear_wd;
  logic status_clear_we;
  logic status_error_qs;
  logic status_cancelled_qs;
  logic [5:0] library_size_qs;
  logic [5:0] library_size_wd;
  logic library_size_we;
  logic [6:0] pixel_bands_qs;
  logic [6:0] pixel_bands_wd;
  logic pixel_bands_we;
  logic [31:0] captured_pixel_addr_qs;
  logic [31:0] captured_pixel_addr_wd;
  logic captured_pixel_addr_we;
  logic [31:0] library_pixel_addr_qs;
  logic [31:0] library_pixel_addr_wd;
  logic library_pixel_addr_we;
  logic [31:0] mse_min_ref_qs;
  logic [31:0] mse_max_ref_qs;
  logic [31:0] mse_min_value_qs;
  logic [31:0] mse_max_value_qs;

  // Register instances
  // R[status]: V(False)

  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_status_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (status_start_we),
    .wd     (status_start_wd),

    // from internal hardware
    .de     (hw2reg.status.start.de),
    .d      (hw2reg.status.start.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.status.start.q ),

    // to register interface (read)
    .qs     (status_start_qs)
  );


  //   F[idle]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_status_idle (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.status.idle.de),
    .d      (hw2reg.status.idle.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.status.idle.q ),

    // to register interface (read)
    .qs     (status_idle_qs)
  );


  //   F[ready]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_status_ready (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.status.ready.de),
    .d      (hw2reg.status.ready.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.status.ready.q ),

    // to register interface (read)
    .qs     (status_ready_qs)
  );


  //   F[done]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_status_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.status.done.de),
    .d      (hw2reg.status.done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.status.done.q ),

    // to register interface (read)
    .qs     (status_done_qs)
  );


  //   F[clear]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_status_clear (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (status_clear_we),
    .wd     (status_clear_wd),

    // from internal hardware
    .de     (hw2reg.status.clear.de),
    .d      (hw2reg.status.clear.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.status.clear.q ),

    // to register interface (read)
    .qs     (status_clear_qs)
  );


  //   F[error]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_status_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.status.error.de),
    .d      (hw2reg.status.error.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.status.error.q ),

    // to register interface (read)
    .qs     (status_error_qs)
  );


  //   F[cancelled]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_status_cancelled (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.status.cancelled.de),
    .d      (hw2reg.status.cancelled.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.status.cancelled.q ),

    // to register interface (read)
    .qs     (status_cancelled_qs)
  );


  // R[library_size]: V(False)

  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_library_size (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (library_size_we),
    .wd     (library_size_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.library_size.q ),

    // to register interface (read)
    .qs     (library_size_qs)
  );


  // R[pixel_bands]: V(False)

  prim_subreg #(
    .DW      (7),
    .SWACCESS("RW"),
    .RESVAL  (7'h0)
  ) u_pixel_bands (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pixel_bands_we),
    .wd     (pixel_bands_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pixel_bands.q ),

    // to register interface (read)
    .qs     (pixel_bands_qs)
  );


  // R[captured_pixel_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_captured_pixel_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (captured_pixel_addr_we),
    .wd     (captured_pixel_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.captured_pixel_addr.q ),

    // to register interface (read)
    .qs     (captured_pixel_addr_qs)
  );


  // R[library_pixel_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_library_pixel_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (library_pixel_addr_we),
    .wd     (library_pixel_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.library_pixel_addr.q ),

    // to register interface (read)
    .qs     (library_pixel_addr_qs)
  );


  // R[mse_min_ref]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_mse_min_ref (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.mse_min_ref.de),
    .d      (hw2reg.mse_min_ref.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mse_min_ref.q ),

    // to register interface (read)
    .qs     (mse_min_ref_qs)
  );


  // R[mse_max_ref]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_mse_max_ref (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.mse_max_ref.de),
    .d      (hw2reg.mse_max_ref.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mse_max_ref.q ),

    // to register interface (read)
    .qs     (mse_max_ref_qs)
  );


  // R[mse_min_value]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_mse_min_value (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.mse_min_value.de),
    .d      (hw2reg.mse_min_value.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mse_min_value.q ),

    // to register interface (read)
    .qs     (mse_min_value_qs)
  );


  // R[mse_max_value]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_mse_max_value (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.mse_max_value.de),
    .d      (hw2reg.mse_max_value.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mse_max_value.q ),

    // to register interface (read)
    .qs     (mse_max_value_qs)
  );




  logic [8:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == HSID_X_CTRL_STATUS_OFFSET);
    addr_hit[1] = (reg_addr == HSID_X_CTRL_LIBRARY_SIZE_OFFSET);
    addr_hit[2] = (reg_addr == HSID_X_CTRL_PIXEL_BANDS_OFFSET);
    addr_hit[3] = (reg_addr == HSID_X_CTRL_CAPTURED_PIXEL_ADDR_OFFSET);
    addr_hit[4] = (reg_addr == HSID_X_CTRL_LIBRARY_PIXEL_ADDR_OFFSET);
    addr_hit[5] = (reg_addr == HSID_X_CTRL_MSE_MIN_REF_OFFSET);
    addr_hit[6] = (reg_addr == HSID_X_CTRL_MSE_MAX_REF_OFFSET);
    addr_hit[7] = (reg_addr == HSID_X_CTRL_MSE_MIN_VALUE_OFFSET);
    addr_hit[8] = (reg_addr == HSID_X_CTRL_MSE_MAX_VALUE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(HSID_X_CTRL_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(HSID_X_CTRL_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(HSID_X_CTRL_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(HSID_X_CTRL_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(HSID_X_CTRL_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(HSID_X_CTRL_PERMIT[5] & ~reg_be))) |
               (addr_hit[6] & (|(HSID_X_CTRL_PERMIT[6] & ~reg_be))) |
               (addr_hit[7] & (|(HSID_X_CTRL_PERMIT[7] & ~reg_be))) |
               (addr_hit[8] & (|(HSID_X_CTRL_PERMIT[8] & ~reg_be)))));
  end

  assign status_start_we = addr_hit[0] & reg_we & !reg_error;
  assign status_start_wd = reg_wdata[0];

  assign status_clear_we = addr_hit[0] & reg_we & !reg_error;
  assign status_clear_wd = reg_wdata[4];

  assign library_size_we = addr_hit[1] & reg_we & !reg_error;
  assign library_size_wd = reg_wdata[5:0];

  assign pixel_bands_we = addr_hit[2] & reg_we & !reg_error;
  assign pixel_bands_wd = reg_wdata[6:0];

  assign captured_pixel_addr_we = addr_hit[3] & reg_we & !reg_error;
  assign captured_pixel_addr_wd = reg_wdata[31:0];

  assign library_pixel_addr_we = addr_hit[4] & reg_we & !reg_error;
  assign library_pixel_addr_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = status_start_qs;
        reg_rdata_next[1] = status_idle_qs;
        reg_rdata_next[2] = status_ready_qs;
        reg_rdata_next[3] = status_done_qs;
        reg_rdata_next[4] = status_clear_qs;
        reg_rdata_next[5] = status_error_qs;
        reg_rdata_next[6] = status_cancelled_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[5:0] = library_size_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[6:0] = pixel_bands_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = captured_pixel_addr_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = library_pixel_addr_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = mse_min_ref_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = mse_max_ref_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = mse_min_value_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = mse_max_value_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module hsid_x_ctrl_reg_top_intf
#(
  parameter int AW = 6,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output hsid_x_ctrl_reg_pkg::hsid_x_ctrl_reg2hw_t reg2hw, // Write
  input  hsid_x_ctrl_reg_pkg::hsid_x_ctrl_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  hsid_x_ctrl_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


