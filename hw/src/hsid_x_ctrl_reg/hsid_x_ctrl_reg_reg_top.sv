// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module hsid_x_ctrl_reg_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 4
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output hsid_x_ctrl_reg_reg_pkg::hsid_x_ctrl_reg_reg2hw_t reg2hw, // Write
  input  hsid_x_ctrl_reg_reg_pkg::hsid_x_ctrl_reg_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import hsid_x_ctrl_reg_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic control_start_wd;
  logic control_start_we;
  logic control_idle_qs;
  logic control_ready_qs;
  logic control_done_qs;
  logic control_clear_qs;
  logic control_clear_wd;
  logic control_clear_we;
  logic status_qs;
  logic status_wd;
  logic status_we;
  logic [31:0] threshold_qs;
  logic [31:0] threshold_wd;
  logic threshold_we;

  // Register instances
  // R[control]: V(False)

  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_control_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_start_we),
    .wd     (control_start_wd),

    // from internal hardware
    .de     (hw2reg.control.start.de),
    .d      (hw2reg.control.start.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    .qs     ()
  );


  //   F[idle]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_control_idle (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.control.idle.de),
    .d      (hw2reg.control.idle.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.idle.q ),

    // to register interface (read)
    .qs     (control_idle_qs)
  );


  //   F[ready]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_control_ready (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.control.ready.de),
    .d      (hw2reg.control.ready.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.ready.q ),

    // to register interface (read)
    .qs     (control_ready_qs)
  );


  //   F[done]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_control_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.control.done.de),
    .d      (hw2reg.control.done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.done.q ),

    // to register interface (read)
    .qs     (control_done_qs)
  );


  //   F[clear]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_control_clear (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_clear_we),
    .wd     (control_clear_wd),

    // from internal hardware
    .de     (hw2reg.control.clear.de),
    .d      (hw2reg.control.clear.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.clear.q ),

    // to register interface (read)
    .qs     (control_clear_qs)
  );


  // R[status]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_status (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (status_we),
    .wd     (status_wd),

    // from internal hardware
    .de     (hw2reg.status.de),
    .d      (hw2reg.status.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (status_qs)
  );


  // R[threshold]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'hffffffff)
  ) u_threshold (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (threshold_we),
    .wd     (threshold_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.threshold.q ),

    // to register interface (read)
    .qs     (threshold_qs)
  );




  logic [2:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == HSID_X_CTRL_REG_CONTROL_OFFSET);
    addr_hit[1] = (reg_addr == HSID_X_CTRL_REG_STATUS_OFFSET);
    addr_hit[2] = (reg_addr == HSID_X_CTRL_REG_THRESHOLD_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(HSID_X_CTRL_REG_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(HSID_X_CTRL_REG_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(HSID_X_CTRL_REG_PERMIT[2] & ~reg_be)))));
  end

  assign control_start_we = addr_hit[0] & reg_we & !reg_error;
  assign control_start_wd = reg_wdata[0];

  assign control_clear_we = addr_hit[0] & reg_we & !reg_error;
  assign control_clear_wd = reg_wdata[4];

  assign status_we = addr_hit[1] & reg_we & !reg_error;
  assign status_wd = reg_wdata[0];

  assign threshold_we = addr_hit[2] & reg_we & !reg_error;
  assign threshold_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = control_idle_qs;
        reg_rdata_next[2] = control_ready_qs;
        reg_rdata_next[3] = control_done_qs;
        reg_rdata_next[4] = control_clear_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = status_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = threshold_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module hsid_x_ctrl_reg_reg_top_intf
#(
  parameter int AW = 4,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output hsid_x_ctrl_reg_reg_pkg::hsid_x_ctrl_reg_reg2hw_t reg2hw, // Write
  input  hsid_x_ctrl_reg_reg_pkg::hsid_x_ctrl_reg_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  hsid_x_ctrl_reg_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


